Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> build
Rule 1     build -> START SEPARATOR rules
Rule 2     rules -> rule
Rule 3     rules -> rules rule
Rule 4     rule -> NONTERMS TO expr SEPARATOR
Rule 5     expr -> single
Rule 6     expr -> expr single
Rule 7     single -> term
Rule 8     single -> nonterm
Rule 9     single -> EPS
Rule 10    term -> TERMS
Rule 11    nonterm -> NONTERMS

Terminals, with rules where they appear

EPS                  : 9
NONTERMS             : 4 11
SEPARATOR            : 1 4
START                : 1
TERMS                : 10
TO                   : 4
error                : 

Nonterminals, with rules where they appear

build                : 0
expr                 : 4 6
nonterm              : 8
rule                 : 2 3
rules                : 1 3
single               : 5 6
term                 : 7

Parsing method: LALR

state 0

    (0) S' -> . build
    (1) build -> . START SEPARATOR rules

    START           shift and go to state 2

    build                          shift and go to state 1

state 1

    (0) S' -> build .



state 2

    (1) build -> START . SEPARATOR rules

    SEPARATOR       shift and go to state 3


state 3

    (1) build -> START SEPARATOR . rules
    (2) rules -> . rule
    (3) rules -> . rules rule
    (4) rule -> . NONTERMS TO expr SEPARATOR

    NONTERMS        shift and go to state 6

    rules                          shift and go to state 4
    rule                           shift and go to state 5

state 4

    (1) build -> START SEPARATOR rules .
    (3) rules -> rules . rule
    (4) rule -> . NONTERMS TO expr SEPARATOR

    $end            reduce using rule 1 (build -> START SEPARATOR rules .)
    NONTERMS        shift and go to state 6

    rule                           shift and go to state 7

state 5

    (2) rules -> rule .

    NONTERMS        reduce using rule 2 (rules -> rule .)
    $end            reduce using rule 2 (rules -> rule .)


state 6

    (4) rule -> NONTERMS . TO expr SEPARATOR

    TO              shift and go to state 8


state 7

    (3) rules -> rules rule .

    NONTERMS        reduce using rule 3 (rules -> rules rule .)
    $end            reduce using rule 3 (rules -> rules rule .)


state 8

    (4) rule -> NONTERMS TO . expr SEPARATOR
    (5) expr -> . single
    (6) expr -> . expr single
    (7) single -> . term
    (8) single -> . nonterm
    (9) single -> . EPS
    (10) term -> . TERMS
    (11) nonterm -> . NONTERMS

    EPS             shift and go to state 14
    TERMS           shift and go to state 15
    NONTERMS        shift and go to state 9

    expr                           shift and go to state 10
    single                         shift and go to state 11
    term                           shift and go to state 12
    nonterm                        shift and go to state 13

state 9

    (11) nonterm -> NONTERMS .

    SEPARATOR       reduce using rule 11 (nonterm -> NONTERMS .)
    EPS             reduce using rule 11 (nonterm -> NONTERMS .)
    TERMS           reduce using rule 11 (nonterm -> NONTERMS .)
    NONTERMS        reduce using rule 11 (nonterm -> NONTERMS .)


state 10

    (4) rule -> NONTERMS TO expr . SEPARATOR
    (6) expr -> expr . single
    (7) single -> . term
    (8) single -> . nonterm
    (9) single -> . EPS
    (10) term -> . TERMS
    (11) nonterm -> . NONTERMS

    SEPARATOR       shift and go to state 16
    EPS             shift and go to state 14
    TERMS           shift and go to state 15
    NONTERMS        shift and go to state 9

    single                         shift and go to state 17
    term                           shift and go to state 12
    nonterm                        shift and go to state 13

state 11

    (5) expr -> single .

    SEPARATOR       reduce using rule 5 (expr -> single .)
    EPS             reduce using rule 5 (expr -> single .)
    TERMS           reduce using rule 5 (expr -> single .)
    NONTERMS        reduce using rule 5 (expr -> single .)


state 12

    (7) single -> term .

    SEPARATOR       reduce using rule 7 (single -> term .)
    EPS             reduce using rule 7 (single -> term .)
    TERMS           reduce using rule 7 (single -> term .)
    NONTERMS        reduce using rule 7 (single -> term .)


state 13

    (8) single -> nonterm .

    SEPARATOR       reduce using rule 8 (single -> nonterm .)
    EPS             reduce using rule 8 (single -> nonterm .)
    TERMS           reduce using rule 8 (single -> nonterm .)
    NONTERMS        reduce using rule 8 (single -> nonterm .)


state 14

    (9) single -> EPS .

    SEPARATOR       reduce using rule 9 (single -> EPS .)
    EPS             reduce using rule 9 (single -> EPS .)
    TERMS           reduce using rule 9 (single -> EPS .)
    NONTERMS        reduce using rule 9 (single -> EPS .)


state 15

    (10) term -> TERMS .

    SEPARATOR       reduce using rule 10 (term -> TERMS .)
    EPS             reduce using rule 10 (term -> TERMS .)
    TERMS           reduce using rule 10 (term -> TERMS .)
    NONTERMS        reduce using rule 10 (term -> TERMS .)


state 16

    (4) rule -> NONTERMS TO expr SEPARATOR .

    NONTERMS        reduce using rule 4 (rule -> NONTERMS TO expr SEPARATOR .)
    $end            reduce using rule 4 (rule -> NONTERMS TO expr SEPARATOR .)


state 17

    (6) expr -> expr single .

    SEPARATOR       reduce using rule 6 (expr -> expr single .)
    EPS             reduce using rule 6 (expr -> expr single .)
    TERMS           reduce using rule 6 (expr -> expr single .)
    NONTERMS        reduce using rule 6 (expr -> expr single .)

